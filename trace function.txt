trace function saves:

Event:
- Event.type
Event target:
- Element.tagName
- Element.id
- Element.className

check for 'trace' array session memory and create or push to array

event -> trace(event, eventhandler)

proposed implementation (currently not using proxy):

        trace: (e:Event, fn: Function) => {
            e.preventDefault();
            interface TraceObjectInterface {
                type: string,
                name?: string,
                tagName?: string,
                id?: string,
                className?: string
            };
            let traceObject:TraceObjectInterface = {
                type: e.type
            };
            if ((e.target as EventTarget)){
                const name = (e.target as Element).nodeName!;
                if (name){
                    traceObject.name = name;
                }
                const {tagName, id, className } = (e.target as Element);
                traceObject = {...traceObject, tagName, id, className};    
            }
            const traceArray = sessionStorage.get('trace');
            if (!traceArray) {
                sessionStorage.set(`[${JSON.stringify((traceObject as TraceObjectInterface))}]`);
            } else {
                const parsedArray = JSON.parse(traceArray);
                parsedArray.push(traceObject);
                sessionStorage.set(JSON.stringify(parsedArray));
            }
            fn(e);
        }